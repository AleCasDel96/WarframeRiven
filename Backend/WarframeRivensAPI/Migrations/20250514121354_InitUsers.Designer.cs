// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarframeRivensAPI.Data;

#nullable disable

namespace WarframeRivensAPI.Migrations
{
    [DbContext(typeof(WarUsersContext))]
    [Migration("20250514121354_InitUsers")]
    partial class InitUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cb508939-89f5-4f40-8f35-96002bc749e7",
                            Name = "basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "6c195a77-42a9-4dd7-a65d-9e3bd2faccd3",
                            Name = "confirmado",
                            NormalizedName = "CONFIRMADO"
                        },
                        new
                        {
                            Id = "da20f131-7906-44b2-953b-e739e7aa95dc",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7868fb6c-65ad-42c6-a2a6-9f9bcf01d6f4",
                            RoleId = "cb508939-89f5-4f40-8f35-96002bc749e7"
                        },
                        new
                        {
                            UserId = "15328a7e-b31c-47e2-84be-e1ca12fe820d",
                            RoleId = "6c195a77-42a9-4dd7-a65d-9e3bd2faccd3"
                        },
                        new
                        {
                            UserId = "3ce6779f-457f-4440-88bf-99e5722a0e50",
                            RoleId = "da20f131-7906-44b2-953b-e739e7aa95dc"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.WarUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Icono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WarframeNick")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7868fb6c-65ad-42c6-a2a6-9f9bcf01d6f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4fc73a76-aa8b-41e3-83d7-5a2729d1d427",
                            Email = "visitante@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Usuario Visitante",
                            NormalizedEmail = "VISITANTE@WARRIVEN.COM",
                            NormalizedUserName = "VISITANTE@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENGc92FsoBBUGDjin7MsZbfB8STqvBk+XXxEZvnJo8YDdX7Bzz140M0Yb6yTMH+qAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "379207f3-76c2-4ecf-abf6-e5766e094ad2",
                            TwoFactorEnabled = false,
                            UserName = "visitante@warriven.com"
                        },
                        new
                        {
                            Id = "15328a7e-b31c-47e2-84be-e1ca12fe820d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0bc2cb4f-2254-45a3-bf15-6e1727ddaccc",
                            Email = "confirmado@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Usuario confirmado",
                            NormalizedEmail = "CONFIRMADO@WARRIVEN.COM",
                            NormalizedUserName = "CONFIRMADO@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIaauIa/01J8RD+GDBkvZcQU5zWnN6QYYnMj01i6bV2qSiuPZqbIIkiI5a1o8w+mzQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb0fc56c-33f4-446b-a63d-67ca30d82990",
                            TwoFactorEnabled = false,
                            UserName = "confirmado@warriven.com"
                        },
                        new
                        {
                            Id = "3ce6779f-457f-4440-88bf-99e5722a0e50",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "702db232-751d-405b-ba6d-4ec6c8d21b28",
                            Email = "admin@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Administrador",
                            NormalizedEmail = "ADMIN@WARRIVEN.COM",
                            NormalizedUserName = "ADMIN@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPobwMxO3M6p5mNDjn/+lvvGJy/KAjlpxErYXan+KUkIUjpny0wMnQkvMRaVfpml3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5b68fb2-a5ef-4ce3-8636-f54fa7a92a74",
                            TwoFactorEnabled = false,
                            UserName = "admin@warriven.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarframeRivensAPI.Data;

#nullable disable

namespace WarframeRivensAPI.Migrations
{
    [DbContext(typeof(WarRivenContext))]
    partial class WarRivenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "857386d0-7bf6-421a-8d93-fcf566089fc9",
                            Name = "basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "3b9b4d06-155b-4bc1-8f84-16844712cbdb",
                            Name = "confirmado",
                            NormalizedName = "CONFIRMADO"
                        },
                        new
                        {
                            Id = "fdb47132-4b6c-44e1-94d9-5188a7d3b6ba",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "39d6cfde-e971-499a-acb1-88c61bf8655b",
                            RoleId = "857386d0-7bf6-421a-8d93-fcf566089fc9"
                        },
                        new
                        {
                            UserId = "a3bf9d97-4643-4c82-8112-043b547bfeab",
                            RoleId = "3b9b4d06-155b-4bc1-8f84-16844712cbdb"
                        },
                        new
                        {
                            UserId = "87c31868-6577-4930-98f6-b61e8d6d01ab",
                            RoleId = "fdb47132-4b6c-44e1-94d9-5188a7d3b6ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Favorito", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdRiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RivenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("RivenId");

                    b.ToTable("Favoritos");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Oferta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Disponibilidad")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdRiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdVendedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrecioVenta")
                        .HasColumnType("int");

                    b.Property<string>("RivenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdVendedor");

                    b.HasIndex("RivenId");

                    b.ToTable("Ofertas");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Riven", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Arma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atrib1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atrib2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atrib3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DAtrib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DValor")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("IdPropietario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Maestria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Polaridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor1")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal?>("Valor2")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal?>("Valor3")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("WarUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdPropietario");

                    b.HasIndex("WarUserId");

                    b.ToTable("Rivens");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Venta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdComprador")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdRiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdVendedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrecioVenta")
                        .HasColumnType("int");

                    b.Property<string>("RivenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdComprador");

                    b.HasIndex("IdVendedor");

                    b.HasIndex("RivenId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.WarUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Icono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WarframeNick")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "39d6cfde-e971-499a-acb1-88c61bf8655b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a5c0832-d185-4998-9dcd-c5193b1af9f9",
                            Email = "visitante@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Usuario Visitante",
                            NormalizedEmail = "VISITANTE@WARRIVEN.COM",
                            NormalizedUserName = "VISITANTE@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGKwKpToXEgbmJGe3vZbH8DLSMo8DAR8Ko+mnzgmlojYb1WPbSNB71BgYuMluc11g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38b7a1f5-509c-43eb-94e3-a5ed5f568ccf",
                            TwoFactorEnabled = false,
                            UserName = "visitante@warriven.com"
                        },
                        new
                        {
                            Id = "a3bf9d97-4643-4c82-8112-043b547bfeab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbfffbd2-88e1-4239-8226-141741eba2fc",
                            Email = "confirmado@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Usuario confirmado",
                            NormalizedEmail = "CONFIRMADO@WARRIVEN.COM",
                            NormalizedUserName = "CONFIRMADO@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGbdd0NuvBVSuT0D08Y4X+rWU6fIBIGG7NxKiaEmpr4CsMmHK2LruP9GFRXY6YoS0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c463d86-de4f-4afa-8661-c47fd0e1f1b0",
                            TwoFactorEnabled = false,
                            UserName = "confirmado@warriven.com"
                        },
                        new
                        {
                            Id = "87c31868-6577-4930-98f6-b61e8d6d01ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2083ddd-43b8-4cbf-b1ee-72b72fde26ab",
                            Email = "admin@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Administrador",
                            NormalizedEmail = "ADMIN@WARRIVEN.COM",
                            NormalizedUserName = "ADMIN@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAG8rsfz2wGu4U3iz6vVXeUPYgv8ylsKEaSGkVqZE9PCcSIvc6iBPi1EY7M2nCDniQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5caa715-dd7f-4f4b-a2b0-dbdad9af1aec",
                            TwoFactorEnabled = false,
                            UserName = "admin@warriven.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Favorito", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.Riven", "Riven")
                        .WithMany()
                        .HasForeignKey("RivenId");

                    b.Navigation("Riven");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Oferta", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Vendedor")
                        .WithMany()
                        .HasForeignKey("IdVendedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.Riven", "Riven")
                        .WithMany()
                        .HasForeignKey("RivenId");

                    b.Navigation("Riven");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Riven", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Propietario")
                        .WithMany()
                        .HasForeignKey("IdPropietario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany("Rivens")
                        .HasForeignKey("WarUserId");

                    b.Navigation("Propietario");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Venta", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Comprador")
                        .WithMany()
                        .HasForeignKey("IdComprador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Vendedor")
                        .WithMany()
                        .HasForeignKey("IdVendedor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.Riven", "Riven")
                        .WithMany()
                        .HasForeignKey("RivenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Riven");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.WarUser", b =>
                {
                    b.Navigation("Rivens");
                });
#pragma warning restore 612, 618
        }
    }
}

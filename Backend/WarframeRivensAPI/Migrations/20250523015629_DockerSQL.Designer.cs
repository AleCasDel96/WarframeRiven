// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarframeRivensAPI.Data;

#nullable disable

namespace WarframeRivensAPI.Migrations
{
    [DbContext(typeof(WarRivenContext))]
    [Migration("20250523015629_DockerSQL")]
    partial class DockerSQL
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1a3f39fb-b0db-4c77-acee-5dc313fde69a",
                            Name = "basic",
                            NormalizedName = "BASIC"
                        },
                        new
                        {
                            Id = "42bb912a-9e7f-462b-bde1-ee14ddac9e32",
                            Name = "confirmado",
                            NormalizedName = "CONFIRMADO"
                        },
                        new
                        {
                            Id = "bd305fdc-9f92-42ab-9954-d8d593814e1c",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9875403d-08ad-4f90-b8bf-5eb560ca128f",
                            RoleId = "1a3f39fb-b0db-4c77-acee-5dc313fde69a"
                        },
                        new
                        {
                            UserId = "3e4b6234-c1e6-47d4-ae5f-9373e40576ff",
                            RoleId = "42bb912a-9e7f-462b-bde1-ee14ddac9e32"
                        },
                        new
                        {
                            UserId = "13ebb16b-3761-44b7-9a60-148f0c20e616",
                            RoleId = "bd305fdc-9f92-42ab-9954-d8d593814e1c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Oferta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Disponibilidad")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdRiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdVendedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrecioVenta")
                        .HasColumnType("int");

                    b.Property<string>("RivenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdVendedor");

                    b.HasIndex("RivenId");

                    b.ToTable("Ofertas");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Riven", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Arma")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atrib1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atrib2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Atrib3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DAtrib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DValor")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("IdPropietario")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Maestria")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Polaridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor1")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal?>("Valor2")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal?>("Valor3")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<string>("WarUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdPropietario");

                    b.HasIndex("WarUserId");

                    b.ToTable("Rivens");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Venta", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaVenta")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Finalizado")
                        .HasColumnType("bit");

                    b.Property<string>("IdComprador")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdOferta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdRiven")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdVendedor")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PrecioVenta")
                        .HasColumnType("int");

                    b.Property<string>("RivenId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdComprador");

                    b.HasIndex("IdVendedor");

                    b.HasIndex("RivenId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.WarUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Icono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WarframeNick")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9875403d-08ad-4f90-b8bf-5eb560ca128f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5cb5180-be2b-410d-8713-ada6bf010c8c",
                            Email = "visitante@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Usuario Visitante",
                            NormalizedEmail = "VISITANTE@WARRIVEN.COM",
                            NormalizedUserName = "VISITANTE@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBRh1OoUQ2dM0jGFYpfQhQzhn7XBjw6VW3cHkcj0Brs4+DotIjliMXPnP9PW66z87Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4806ea6e-2fc2-428e-98b2-58ca57663a21",
                            TwoFactorEnabled = false,
                            UserName = "visitante@warriven.com"
                        },
                        new
                        {
                            Id = "3e4b6234-c1e6-47d4-ae5f-9373e40576ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06a431fe-ff20-48e0-920e-f738211eb395",
                            Email = "confirmado@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Usuario confirmado",
                            NormalizedEmail = "CONFIRMADO@WARRIVEN.COM",
                            NormalizedUserName = "CONFIRMADO@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAHmY34KJC7nKGie/lJo+Ql5PtGiNBNs3nWSQgGjViNbZlOzuZBzpXf+6USGyafF2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2cf59bbe-a007-46aa-a7b9-c6b5e996b97a",
                            TwoFactorEnabled = false,
                            UserName = "confirmado@warriven.com"
                        },
                        new
                        {
                            Id = "13ebb16b-3761-44b7-9a60-148f0c20e616",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36b59ace-7372-4246-b5c1-7ba5b5395d1c",
                            Email = "admin@warriven.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nickname = "Administrador",
                            NormalizedEmail = "ADMIN@WARRIVEN.COM",
                            NormalizedUserName = "ADMIN@WARRIVEN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEITvlAIojcppoWzI0oAEPXBIojw6aqZBrVJAEXN+xz7jO67oW3HhhZRJFoK7KmhScQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "daa8e4e3-b88e-4e51-9a1e-b59f7be41d2e",
                            TwoFactorEnabled = false,
                            UserName = "admin@warriven.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Oferta", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Vendedor")
                        .WithMany()
                        .HasForeignKey("IdVendedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.Riven", "Riven")
                        .WithMany()
                        .HasForeignKey("RivenId");

                    b.Navigation("Riven");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Riven", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Propietario")
                        .WithMany()
                        .HasForeignKey("IdPropietario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.WarUser", null)
                        .WithMany("Rivens")
                        .HasForeignKey("WarUserId");

                    b.Navigation("Propietario");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.Venta", b =>
                {
                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Comprador")
                        .WithMany()
                        .HasForeignKey("IdComprador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.WarUser", "Vendedor")
                        .WithMany()
                        .HasForeignKey("IdVendedor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarframeRivensAPI.Models.Riven", "Riven")
                        .WithMany()
                        .HasForeignKey("RivenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comprador");

                    b.Navigation("Riven");

                    b.Navigation("Vendedor");
                });

            modelBuilder.Entity("WarframeRivensAPI.Models.WarUser", b =>
                {
                    b.Navigation("Rivens");
                });
#pragma warning restore 612, 618
        }
    }
}
